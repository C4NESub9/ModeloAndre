import numpy as np
import pandas as pd
import csv
from unicodedata import normalize
from unidecode import unidecode
import datetime
from datetime import timedelta 
import time 

from bokeh.layouts import column, grid, gridplot
from bokeh.models import ColumnDataSource, CustomJS, Slider, Select, Div, Paragraph, Span
from bokeh.plotting import figure, output_file, show
from bokeh.models import FixedTicker, HoverTool
from bokeh.palettes import Spectral6, Paired10
import webbrowser
# Vari√°veis Globais
RegioesSaudeNE = ["NERNRSCA24004", "NERNRSCA24008", "NERNRSCA24003", "NERNRSCA24006", "NERNRSCA24002", "NERNRSCA24001", "NERNRSCA24005", "NERNRSCA24007","NERNRSOA24004", "NERNRSOA24008", "NERNRSOA24003", "NERNRSOA24006", "NERNRSOA24002", "NERNRSOA24001", "NERNRSOA24005", "NERNRSOA24007","NEPBRSCA25011", "NEPBRSCA25007", "NEPBRSCA25003", "NEPBRSCA25002", "NEPBRSCA25015", "NEPBRSCA25001", "NEPBRSCA25009", "NEPBRSCA25005", "NEPBRSCA25010", "NEPBRSCA25006", "NEPBRSCA25016", "NEPBRSCA25014", "NEPBRSCA25004", "NEPBRSCA25008", "NEPBRSCA25013", "NEPBRSCA25012", "NEPBRSOA25007", "NEPBRSOA25003", "NEPBRSOA25002", "NEPBRSOA25015", "NEPBRSOA25001", "NEPBRSOA25009", "NEPBRSOA25005", "NEPBRSOA25010", "NEPBRSOA25006", "NEPBRSOA25016", "NEPBRSOA25014", "NEPBRSOA25008", "NEPBRSOA25012","NEBARSCA29023", "NEBARSCA29017", "NEBARSCA29001", "NEBARSCA29019", "NEBARSCA29025", "NEBARSCA29015", "NEBARSCA29026", "NEBARSCA29012", "NEBARSCA29022", "NEBARSCA29006", "NEBARSCA29010", "NEBARSCA29028", "NEBARSCA29011", "NEBARSCA29003", "NEBARSCA29009", "NEBARSCA29002", "NEBARSCA29008", "NEBARSCA29018", "NEBARSCA29021", "NEBARSCA29005", "NEBARSCA29007", "NEBARSCA29014", "NEBARSCA29027", "NEBARSCA29004", "NEBARSCA29016", "NEBARSCA29024", "NEBARSCA29020", "NEBARSCA29013","NEBARSOA29023", "NEBARSOA29001", "NEBARSOA29019", "NEBARSOA29025", "NEBARSOA29015", "NEBARSOA29026", "NEBARSOA29012", "NEBARSOA29022", "NEBARSOA29006", "NEBARSOA29010", "NEBARSOA29028", "NEBARSOA29011", "NEBARSOA29003", "NEBARSOA29009", "NEBARSOA29002", "NEBARSOA29018", "NEBARSOA29005", "NEBARSOA29014", "NEBARSOA29027", "NEBARSOA29004", "NEBARSOA29016", "NEBARSOA29024", "NEBARSOA29020", "NEBARSOA29013","NESERSCA28007", "NESERSCA28001", "NESERSCA28002", "NESERSCA28003", "NESERSCA28005", "NESERSCA28006", "NESERSCA28004","NESERSOA28007", "NESERSOA28001", "NESERSOA28002", "NESERSOA28003", "NESERSOA28005", "NESERSOA28006", "NESERSOA28004","NEALRSCA27010", "NEALRSCA27005", "NEALRSCA27007", "NEALRSCA27004", "NEALRSCA27001", "NEALRSCA27008", "NEALRSCA27003", "NEALRSCA27009", "NEALRSCA27006", "NEALRSCA27002","NEALRSOA27010", "NEALRSOA27005", "NEALRSOA27007", "NEALRSOA27004", "NEALRSOA27001", "NEALRSOA27008", "NEALRSOA27003", "NEALRSOA27009", "NEALRSOA27006", "NEALRSOA27002","NEMARSCA21001", "NEMARSCA21005", "NEMARSCA21006", "NEMARSCA21016", "NEMARSCA21002", "NEMARSCA21007", "NEMARSCA21014", "NEMARSCA21003", "NEMARSCA21019", "NEMARSCA21008", "NEMARSCA21009", "NEMARSCA21011", "NEMARSCA21004", "NEMARSCA21013", "NEMARSCA21018", "NEMARSCA21015", "NEMARSCA21010", "NEMARSCA21012", "NEMARSCA21017","NEMARSOA21001", "NEMARSOA21005", "NEMARSOA21006", "NEMARSOA21016", "NEMARSOA21002", "NEMARSOA21007", "NEMARSOA21014", "NEMARSOA21003", "NEMARSOA21019", "NEMARSOA21008", "NEMARSOA21009", "NEMARSOA21011", "NEMARSOA21004", "NEMARSOA21013", "NEMARSOA21018", "NEMARSOA21015", "NEMARSOA21010", "NEMARSOA21012", "NEMARSOA21017","NEPERSCA26010", "NEPERSCA26001", "NEPERSCA26009", "NEPERSCA26003", "NEPERSCA26008", "NEPERSCA26004", "NEPERSCA26005", "NEPERSCA26007", "NEPERSCA26002", "NEPERSCA26011", "NEPERSCA26012", "NEPERSCA26006","NEPERSOA26010", "NEPERSOA26001", "NEPERSOA26009", "NEPERSOA26003", "NEPERSOA26008", "NEPERSOA26004", "NEPERSOA26005", "NEPERSOA26007", "NEPERSOA26002", "NEPERSOA26011", "NEPERSOA26012", "NEPERSOA26006","NECERSCA23019", "NECERSCA23003", "NECERSCA23012", "NECERSCA23018", "NECERSCA23014", "NECERSCA23011", "NECERSCA23020", "NECERSCA23010", "NECERSCA23006", "NECERSCA23002", "NECERSCA23001", "NECERSCA23007", "NECERSCA23004", "NECERSCA23015", "NECERSCA23017", "NECERSCA23008", "NECERSCA23021", "NECERSCA23016", "NECERSCA23022", "NECERSCA23005", "NECERSCA23013", "NECERSCA23009","NECERSOA23019", "NECERSOA23003", "NECERSOA23012", "NECERSOA23018", "NECERSOA23014", "NECERSOA23011", "NECERSOA23020", "NECERSOA23010", "NECERSOA23006", "NECERSOA23002", "NECERSOA23001", "NECERSOA23007", "NECERSOA23004", "NECERSOA23015", "NECERSOA23017", "NECERSOA23008", "NECERSOA23021", "NECERSOA23016", "NECERSOA23022", "NECERSOA23005", "NECERSOA23013", "NECERSOA23009","NEPIRSCA22004", "NEPIRSCA22009", "NEPIRSCA22002", "NEPIRSCA22006", "NEPIRSCA22010", "NEPIRSCA22007", "NEPIRSCA22003", "NEPIRSCA22008", "NEPIRSCA22011", "NEPIRSCA22001", "NEPIRSCA22005","NEPIRSOA22004", "NEPIRSOA22009", "NEPIRSOA22002", "NEPIRSOA22006", "NEPIRSOA22010", "NEPIRSOA22007", "NEPIRSOA22003", "NEPIRSOA22011", "NEPIRSOA22001", "NEPIRSOA22005"]
RegioesSaudeN  = ["NORORSCA11005", "NORORSCA11001", "NORORSCA11006", "NORORSCA11002", "NORORSCA11007", "NORORSCA11004", "NORORSCA11003","NORORSOA11005", "NORORSOA11001", "NORORSOA11006", "NORORSOA11002", "NORORSOA11007", "NORORSOA11004", "NORORSOA11003","NOACRSCA12002", "NOACRSCA12001", "NOACRSCA12003","NOACRSOA12002", "NOACRSOA12001", "NOACRSOA12003","NOAMRSCA13008", "NOAMRSCA13009", "NOAMRSCA13002", "NOAMRSCA13003", "NOAMRSCA13001", "NOAMRSCA13005", "NOAMRSCA13006", "NOAMRSCA13007", "NOAMRSCA13004","NOAMRSOA13008", "NOAMRSOA13009", "NOAMRSOA13002", "NOAMRSOA13003", "NOAMRSOA13001", "NOAMRSOA13005", "NOAMRSOA13006", "NOAMRSOA13007", "NOAMRSOA13004","NORRRSCA14001", "NORRRSCA14002","NORRRSOA14001", "NORRRSOA14002","NOPARSCA15011", "NOPARSCA15003", "NOPARSCA15007", "NOPARSCA15013", "NOPARSCA15001", "NOPARSCA15002", "NOPARSCA15012", "NOPARSCA15014", "NOPARSCA15006", "NOPARSCA15009", "NOPARSCA15008", "NOPARSCA15010", "NOPARSCA15004","NOPARSOA15011", "NOPARSOA15003", "NOPARSOA15007", "NOPARSOA15013", "NOPARSOA15001", "NOPARSOA15002", "NOPARSOA15012", "NOPARSOA15014", "NOPARSOA15006", "NOPARSOA15009", "NOPARSOA15008", "NOPARSOA15010", "NOPARSOA15004","NOAPRSCA16001", "NOAPRSCA16002", "NOAPRSCA16003","NOAPRSOA16001", "NOAPRSOA16002", "NOAPRSOA16003","NOTORSCA17007", "NOTORSCA17002", "NOTORSCA17005", "NOTORSCA17001", "NOTORSCA17004", "NOTORSCA17003", "NOTORSCA17008", "NOTORSCA17006","NOTORSOA17007", "NOTORSOA17002", "NOTORSOA17005", "NOTORSOA17001", "NOTORSOA17004", "NOTORSOA17003", "NOTORSOA17008", "NOTORSOA17006"]
RegioesSaudeS =  ["SUPRRSCA41018", "SUPRRSCA41002", "SUPRRSCA41011", "SUPRRSCA41014", "SUPRRSCA41017", "SUPRRSCA41008", "SUPRRSCA41010", "SUPRRSCA41015", "SUPRRSCA41001", "SUPRRSCA41006", "SUPRRSCA41016", "SUPRRSCA41003", "SUPRRSCA41020", "SUPRRSCA41012", "SUPRRSCA41019", "SUPRRSCA41022", "SUPRRSCA41005", "SUPRRSCA41007", "SUPRRSCA41013", "SUPRRSCA41021", "SUPRRSCA41004", "SUPRRSCA41009" ,"SUPRRSOA41018", "SUPRRSOA41002", "SUPRRSOA41011", "SUPRRSOA41014", "SUPRRSOA41017", "SUPRRSOA41008", "SUPRRSOA41010", "SUPRRSOA41015", "SUPRRSOA41001", "SUPRRSOA41006", "SUPRRSOA41016", "SUPRRSOA41003", "SUPRRSOA41020", "SUPRRSOA41012", "SUPRRSOA41019", "SUPRRSOA41022", "SUPRRSOA41005", "SUPRRSOA41007", "SUPRRSOA41013", "SUPRRSOA41021", "SUPRRSOA41004", "SUPRRSOA41009" ,"SUSCRSCA42008", "SUSCRSCA42003", "SUSCRSCA42004", "SUSCRSCA42002", "SUSCRSCA42007", "SUSCRSCA42010", "SUSCRSCA42001", "SUSCRSCA42013", "SUSCRSCA42006", "SUSCRSCA42011", "SUSCRSCA42014", "SUSCRSCA42016", "SUSCRSCA42009", "SUSCRSCA42005", "SUSCRSCA42012", "SUSCRSCA42015","SUSCRSOA42008", "SUSCRSOA42003", "SUSCRSOA42004", "SUSCRSOA42002", "SUSCRSOA42007", "SUSCRSOA42010", "SUSCRSOA42001", "SUSCRSOA42006", "SUSCRSOA42011", "SUSCRSOA42014", "SUSCRSOA42016", "SUSCRSOA42009", "SUSCRSOA42005", "SUSCRSOA42012", "SUSCRSOA42015","SURSRSCA43018", "SURSRSCA43001", "SURSRSCA43013", "SURSRSCA43014", "SURSRSCA43003", "SURSRSCA43015", "SURSRSCA43010", "SURSRSCA43029", "SURSRSCA43026", "SURSRSCA43007", "SURSRSCA43016", "SURSRSCA43004", "SURSRSCA43009", "SURSRSCA43021", "SURSRSCA43019", "SURSRSCA43022", "SURSRSCA43005", "SURSRSCA43008", "SURSRSCA43025", "SURSRSCA43020", "SURSRSCA43024", "SURSRSCA43030","SURSRSCA43011", "SURSRSCA43027", "SURSRSCA43017", "SURSRSCA43006", "SURSRSCA43028", "SURSRSCA43023", "SURSRSCA43012", "SURSRSCA43002"]
RegioesSaudeSE = ["SEMGRSCA31074", "SEMGRSCA31024", "SEMGRSCA31059", "SEMGRSCA31037", "SEMGRSCA31072", "SEMGRSCA31062", "SEMGRSCA31068", "SEMGRSCA31040", "SEMGRSCA31041", "SEMGRSCA31001", "SEMGRSCA31013", "SEMGRSCA31094", "SEMGRSCA31036", "SEMGRSCA31092", "SEMGRSCA31060", "SEMGRSCA31095", "SEMGRSCA31006", "SEMGRSCA31090", "SEMGRSCA31035", "SEMGRSCA31064", "SEMGRSCA31075", "SEMGRSCA31082", "SEMGRSCA31070", "SEMGRSCA31002", "SEMGRSCA31087", "SEMGRSCA31058", "SEMGRSCA31008", "SEMGRSCA31030", "SEMGRSCA31021", "SEMGRSCA31045", "SEMGRSCA31015", "SEMGRSCA31023", "SEMGRSCA31097", "SEMGRSCA31016", "SEMGRSCA31017", "SEMGRSCA31047", "SEMGRSCA31011", "SEMGRSCA31083", "SEMGRSCA31028", "SEMGRSCA31034", "SEMGRSCA31007", "SEMGRSCA31049", "SEMGRSCA31003", "SEMGRSCA31019", "SEMGRSCA31055", "SEMGRSCA31073", "SEMGRSCA31042", "SEMGRSCA31010", "SEMGRSCA31089", "SEMGRSCA31027", "SEMGRSCA31091", "SEMGRSCA31051", "SEMGRSCA31093", "SEMGRSCA31067", "SEMGRSCA31079", "SEMGRSCA31026", "SEMGRSCA31066", "SEMGRSCA31088", "SEMGRSCA31086", "SEMGRSCA31004", "SEMGRSCA31048", "SEMGRSCA31065", "SEMGRSCA31053", "SEMGRSCA31025", "SEMGRSCA31078", "SEMGRSCA31018", "SEMGRSCA31050", "SEMGRSCA31085", "SEMGRSCA31038", "SEMGRSCA31020", "SEMGRSCA31012", "SEMGRSCA31052", "SEMGRSCA31096", "SEMGRSCA31071", "SEMGRSCA31057", "SEMGRSCA31032", "SEMGRSCA31022", "SEMGRSCA31009", "SEMGRSCA31077", "SEMGRSCA31099", "SEMGRSCA31084", "SEMGRSCA31076", "SEMGRSCA31098", "SEMGRSCA31046", "SEMGRSCA31080", "SEMGRSOA31074", "SEMGRSOA31024", "SEMGRSOA31059", "SEMGRSOA31037", "SEMGRSOA31072", "SEMGRSOA31041", "SEMGRSOA31001", "SEMGRSOA31013", "SEMGRSOA31094", "SEMGRSOA31036", "SEMGRSOA31092", "SEMGRSOA31006", "SEMGRSOA31090", "SEMGRSOA31035", "SEMGRSOA31075", "SEMGRSOA31070", "SEMGRSOA31087", "SEMGRSOA31058", "SEMGRSOA31044", "SEMGRSOA31008", "SEMGRSOA31021", "SEMGRSOA31045", "SEMGRSOA31015", "SEMGRSOA31097", "SEMGRSOA31016", "SEMGRSOA31017", "SEMGRSOA31047", "SEMGRSOA31011", "SEMGRSOA31028", "SEMGRSOA31034", "SEMGRSOA31007", "SEMGRSOA31049", "SEMGRSOA31003", "SEMGRSOA31019", "SEMGRSOA31055", "SEMGRSOA31073", "SEMGRSOA31042", "SEMGRSOA31010", "SEMGRSOA31051", "SEMGRSOA31093", "SEMGRSOA31066", "SEMGRSOA31086", "SEMGRSOA31004", "SEMGRSOA31048", "SEMGRSOA31065", "SEMGRSOA31025", "SEMGRSOA31078", "SEMGRSOA31018", "SEMGRSOA31038", "SEMGRSOA31020", "SEMGRSOA31012", "SEMGRSOA31052", "SEMGRSOA31096", "SEMGRSOA31071", "SEMGRSOA31057", "SEMGRSOA31032", "SEMGRSOA31022", "SEMGRSOA31031", "SEMGRSOA31009", "SEMGRSOA31099", "SEMGRSOA31084", "SEMGRSOA31098", "SEMGRSOA31046", "SEESRSCA32002", "SEESRSCA32001", "SEESRSCA32003", "SEESRSCA32004","SEESRSOA32002", "SEESRSOA32001", "SEESRSOA32003", "SEESRSOA32004","SERJRSCA33001", "SERJRSCA33007", "SERJRSCA33002", "SERJRSCA33003", "SERJRSCA33004", "SERJRSCA33005", "SERJRSCA33009", "SERJRSCA33008", "SERJRSCA33006","SERJRSOA33001", "SERJRSOA33007", "SERJRSOA33002", "SERJRSOA33003", "SERJRSOA33004", "SERJRSOA33005", "SERJRSOA33009", "SERJRSOA33008", "SERJRSOA33006","SESPRSCA35091", "SESPRSCA35156", "SESPRSCA35142", "SESPRSCA35074", "SESPRSCA35061", "SESPRSCA35103", "SESPRSCA35062", "SESPRSCA35161", "SESPRSCA35112", "SESPRSCA35051", "SESPRSCA35133", "SESPRSCA35023", "SESPRSCA35163", "SESPRSCA35157", "SESPRSCA35093", "SESPRSCA35072", "SESPRSCA35031", "SESPRSCA35104", "SESPRSCA35022", "SESPRSCA35063", "SESPRSCA35172", "SESPRSCA35153", "SESPRSCA35162", "SESPRSCA35021", "SESPRSCA35083", "SESPRSCA35101", "SESPRSCA35151", "SESPRSCA35011", "SESPRSCA35092", "SESPRSCA35071", "SESPRSCA35155", "SESPRSCA35064", "SESPRSCA35121", "SESPRSCA35131", "SESPRSCA35014", "SESPRSCA35095", "SESPRSCA35052", "SESPRSCA35094", "SESPRSCA35041", "SESPRSCA35032", "SESPRSCA35073", "SESPRSCA35171", "SESPRSCA35143", "SESPRSCA35065", "SESPRSCA35012", "SESPRSCA35114", "SESPRSCA35174", "SESPRSCA35033", "SESPRSCA35173", "SESPRSCA35102", "SESPRSCA35013", "SESPRSCA35132", "SESPRSCA35081", "SESPRSCA35034", "SESPRSCA35015", "SESPRSCA35111", "SESPRSCA35154", "SESPRSCA35115", "SESPRSCA35113", "SESPRSCA35082", "SESPRSCA35141", "SESPRSCA35152", "SESPRSCA35016","SESPRSOA35091", "SESPRSOA35156", "SESPRSOA35142", "SESPRSOA35074", "SESPRSOA35061", "SESPRSOA35103", "SESPRSOA35062", "SESPRSOA35161", "SESPRSOA35112", "SESPRSOA35051", "SESPRSOA35133", "SESPRSOA35023", "SESPRSOA35163", "SESPRSOA35157", "SESPRSOA35093", "SESPRSOA35072", "SESPRSOA35031", "SESPRSOA35104", "SESPRSOA35022", "SESPRSOA35063", "SESPRSOA35172", "SESPRSOA35153", "SESPRSOA35162", "SESPRSOA35021", "SESPRSOA35083", "SESPRSOA35101", "SESPRSOA35151", "SESPRSOA35011", "SESPRSOA35092", "SESPRSOA35155", "SESPRSOA35064", "SESPRSOA35121", "SESPRSOA35131", "SESPRSOA35014", "SESPRSOA35095", "SESPRSOA35052", "SESPRSOA35094", "SESPRSOA35041", "SESPRSOA35032", "SESPRSOA35073", "SESPRSOA35171", "SESPRSOA35143", "SESPRSOA35065", "SESPRSOA35012", "SESPRSOA35114", "SESPRSOA35174", "SESPRSOA35033", "SESPRSOA35173", "SESPRSOA35102", "SESPRSOA35013", "SESPRSOA35132", "SESPRSOA35081", "SESPRSOA35034", "SESPRSOA35015", "SESPRSOA35111", "SESPRSOA35154", "SESPRSOA35113", "SESPRSOA35082", "SESPRSOA35141", "SESPRSOA35016"]
RegioesSaudeCO = ["COMSRSCA50004", "COMSRSCA50001", "COMSRSCA50003", "COMSRSCA50002","COMSRSOA50004", "COMSRSOA50001", "COMSRSOA50003", "COMSRSOA50002","COGORSCA52001", "COGORSCA52011", "COGORSCA52015", "COGORSCA52010", "COGORSCA52003", "COGORSCA52004", "COGORSCA52017", "COGORSCA52014", "COGORSCA52012", "COGORSCA52009", "COGORSCA52005", "COGORSCA52002", "COGORSCA52016", "COGORSCA52018", "COGORSCA52006", "COGORSCA52013", "COGORSCA52008", "COGORSCA52007","COGORSOA52001", "COGORSOA52011", "COGORSOA52015", "COGORSOA52010", "COGORSOA52003", "COGORSOA52004", "COGORSOA52017", "COGORSOA52014", "COGORSOA52012", "COGORSOA52009", "COGORSOA52005", "COGORSOA52002", "COGORSOA52016", "COGORSOA52018", "COGORSOA52006", "COGORSOA52013", "COGORSOA52008", "COMTRSCA51002", "COMTRSCA51006", "COMTRSCA51001", "COMTRSCA51013", "COMTRSCA51009", "COMTRSCA51004", "COMTRSCA51011", "COMTRSCA51007", "COMTRSCA51008", "COMTRSCA51005", "COMTRSCA51012", "COMTRSCA51003", "COMTRSCA51014", "COMTRSCA51010", "COMTRSCA51015", "COMTRSCA51016","COMTRSOA51002", "COMTRSOA51006", "COMTRSOA51001", "COMTRSOA51013", "COMTRSOA51009", "COMTRSOA51004", "COMTRSOA51011", "COMTRSOA51007", "COMTRSOA51008", "COMTRSOA51005", "COMTRSOA51012", "COMTRSOA51003", "COMTRSOA51014", "COMTRSOA51010", "COMTRSOA51016"]
RegioesSaude = RegioesSaudeNE+RegioesSaudeN+RegioesSaudeS+RegioesSaudeSE+RegioesSaudeCO
#RegioesSaude = ["NERNRSCA24004", "NERNRSCA24008", "NERNRSCA24003", "NERNRSCA24006", "NERNRSCA24002", "NERNRSCA24001", "NERNRSCA24005", "NERNRSCA24007","NERNRSOA24004", "NERNRSOA24008", "NERNRSOA24003", "NERNRSOA24006", "NERNRSOA24002", "NERNRSOA24001", "NERNRSOA24005", "NERNRSOA24007","NEPBRSCA25011", "NEPBRSCA25007", "NEPBRSCA25003", "NEPBRSCA25002", "NEPBRSCA25015", "NEPBRSCA25001", "NEPBRSCA25009", "NEPBRSCA25005", "NEPBRSCA25010", "NEPBRSCA25006", "NEPBRSCA25016", "NEPBRSCA25014", "NEPBRSCA25004", "NEPBRSCA25008", "NEPBRSCA25013", "NEPBRSCA25012", "NEPBRSOA25007", "NEPBRSOA25003", "NEPBRSOA25002", "NEPBRSOA25015", "NEPBRSOA25001", "NEPBRSOA25009", "NEPBRSOA25005", "NEPBRSOA25010", "NEPBRSOA25006", "NEPBRSOA25016", "NEPBRSOA25014", "NEPBRSOA25008", "NEPBRSOA25012","NEBARSCA29023", "NEBARSCA29017", "NEBARSCA29001", "NEBARSCA29019", "NEBARSCA29025", "NEBARSCA29015", "NEBARSCA29026", "NEBARSCA29012", "NEBARSCA29022", "NEBARSCA29006", "NEBARSCA29010", "NEBARSCA29028", "NEBARSCA29011", "NEBARSCA29003", "NEBARSCA29009", "NEBARSCA29002", "NEBARSCA29008", "NEBARSCA29018", "NEBARSCA29021", "NEBARSCA29005", "NEBARSCA29007", "NEBARSCA29014", "NEBARSCA29027", "NEBARSCA29004", "NEBARSCA29016", "NEBARSCA29024", "NEBARSCA29020", "NEBARSCA29013","NEBARSOA29023", "NEBARSOA29001", "NEBARSOA29019", "NEBARSOA29025", "NEBARSOA29015", "NEBARSOA29026", "NEBARSOA29012", "NEBARSOA29022", "NEBARSOA29006", "NEBARSOA29010", "NEBARSOA29028", "NEBARSOA29011", "NEBARSOA29003", "NEBARSOA29009", "NEBARSOA29002",  "NEBARSOA29018", "NEBARSOA29005", "NEBARSOA29014", "NEBARSOA29027", "NEBARSOA29004", "NEBARSOA29016", "NEBARSOA29024", "NEBARSOA29020", "NEBARSOA29013","NESERSCA28007", "NESERSCA28001", "NESERSCA28002", "NESERSCA28003", "NESERSCA28005", "NESERSCA28006", "NESERSCA28004","NESERSOA28007", "NESERSOA28001", "NESERSOA28002", "NESERSOA28003", "NESERSOA28005", "NESERSOA28006", "NESERSOA28004","NEALRSCA27010", "NEALRSCA27005", "NEALRSCA27007", "NEALRSCA27004", "NEALRSCA27001", "NEALRSCA27008", "NEALRSCA27003", "NEALRSCA27009", "NEALRSCA27006", "NEALRSCA27002","NEALRSOA27010", "NEALRSOA27005", "NEALRSOA27007", "NEALRSOA27004", "NEALRSOA27001", "NEALRSOA27008", "NEALRSOA27003", "NEALRSOA27009", "NEALRSOA27006", "NEALRSOA27002","NEMARSCA21001", "NEMARSCA21005", "NEMARSCA21006", "NEMARSCA21016", "NEMARSCA21002", "NEMARSCA21007", "NEMARSCA21014", "NEMARSCA21003", "NEMARSCA21019", "NEMARSCA21008", "NEMARSCA21009", "NEMARSCA21011", "NEMARSCA21004", "NEMARSCA21013", "NEMARSCA21018", "NEMARSCA21015", "NEMARSCA21010", "NEMARSCA21012", "NEMARSCA21017","NEMARSOA21001", "NEMARSOA21005", "NEMARSOA21006", "NEMARSOA21016", "NEMARSOA21002", "NEMARSOA21007", "NEMARSOA21014", "NEMARSOA21003", "NEMARSOA21019", "NEMARSOA21008", "NEMARSOA21009", "NEMARSOA21011", "NEMARSOA21004", "NEMARSOA21013", "NEMARSOA21018", "NEMARSOA21015", "NEMARSOA21010", "NEMARSOA21012", "NEMARSOA21017","NEPERSCA26010", "NEPERSCA26001", "NEPERSCA26009", "NEPERSCA26003", "NEPERSCA26008", "NEPERSCA26004", "NEPERSCA26005", "NEPERSCA26007", "NEPERSCA26002", "NEPERSCA26011", "NEPERSCA26012", "NEPERSCA26006","NEPERSOA26010", "NEPERSOA26001", "NEPERSOA26009", "NEPERSOA26003", "NEPERSOA26008", "NEPERSOA26004", "NEPERSOA26005", "NEPERSOA26007", "NEPERSOA26002", "NEPERSOA26011", "NEPERSOA26012", "NEPERSOA26006","NECERSCA23019", "NECERSCA23003", "NECERSCA23012", "NECERSCA23018", "NECERSCA23014", "NECERSCA23011", "NECERSCA23020", "NECERSCA23010", "NECERSCA23006", "NECERSCA23002", "NECERSCA23001", "NECERSCA23007", "NECERSCA23004", "NECERSCA23015", "NECERSCA23017", "NECERSCA23008", "NECERSCA23021", "NECERSCA23016", "NECERSCA23022", "NECERSCA23005", "NECERSCA23013", "NECERSCA23009","NECERSOA23019", "NECERSOA23003", "NECERSOA23012", "NECERSOA23018", "NECERSOA23014", "NECERSOA23011", "NECERSOA23020", "NECERSOA23010", "NECERSOA23006", "NECERSOA23002", "NECERSOA23001", "NECERSOA23007", "NECERSOA23004", "NECERSOA23015", "NECERSOA23017", "NECERSOA23008", "NECERSOA23021", "NECERSOA23016", "NECERSOA23022", "NECERSOA23005", "NECERSOA23013", "NECERSOA23009","NEPIRSCA22004", "NEPIRSCA22009", "NEPIRSCA22002", "NEPIRSCA22006", "NEPIRSCA22010", "NEPIRSCA22007", "NEPIRSCA22003", "NEPIRSCA22008", "NEPIRSCA22011", "NEPIRSCA22001", "NEPIRSCA22005","NEPIRSOA22004", "NEPIRSOA22009", "NEPIRSOA22002", "NEPIRSOA22006", "NEPIRSOA22010", "NEPIRSOA22007", "NEPIRSOA22003",  "NEPIRSOA22011", "NEPIRSOA22001", "NEPIRSOA22005","NRORSCA11005", "NRORSCA11001", "NRORSCA11006", "NRORSCA11002", "NRORSCA11007", "NRORSCA11004", "NRORSCA11003","NRORSOA11005", "NRORSOA11001", "NRORSOA11006", "NRORSOA11002", "NRORSOA11007", "NRORSOA11004", "NRORSOA11003","NACRSCA12002", "NACRSCA12001", "NACRSCA12003","NACRSOA12002", "NACRSOA12001", "NACRSOA12003","NAMRSCA13008", "NAMRSCA13009", "NAMRSCA13002", "NAMRSCA13003", "NAMRSCA13001", "NAMRSCA13005", "NAMRSCA13006", "NAMRSCA13007", "NAMRSCA13004","NAMRSOA13008", "NAMRSOA13009", "NAMRSOA13002", "NAMRSOA13003", "NAMRSOA13001", "NAMRSOA13005", "NAMRSOA13006", "NAMRSOA13007", "NAMRSOA13004","NRRRSCA14001", "NRRRSCA14002","NRRRSOA14001", "NRRRSOA14002","NPARSCA15011", "NPARSCA15003", "NPARSCA15007", "NPARSCA15013", "NPARSCA15001", "NPARSCA15002", "NPARSCA15012", "NPARSCA15014", "NPARSCA15006", "NPARSCA15009", "NPARSCA15008", "NPARSCA15010", "NPARSCA15004","NPARSOA15011", "NPARSOA15003", "NPARSOA15007", "NPARSOA15013", "NPARSOA15001", "NPARSOA15002", "NPARSOA15012", "NPARSOA15014", "NPARSOA15006", "NPARSOA15009", "NPARSOA15008", "NPARSOA15010", "NPARSOA15004","NAPRSCA16001", "NAPRSCA16002", "NAPRSCA16003","NAPRSOA16001", "NAPRSOA16002", "NAPRSOA16003","NTORSCA17007", "NTORSCA17002", "NTORSCA17005", "NTORSCA17001", "NTORSCA17004", "NTORSCA17003", "NTORSCA17008", "NTORSCA17006","NTORSOA17007", "NTORSOA17002", "NTORSOA17005", "NTORSOA17001", "NTORSOA17004", "NTORSOA17003", "NTORSOA17008", "NTORSOA17006","SPRRSCA41018", "SPRRSCA41002", "SPRRSCA41011", "SPRRSCA41014", "SPRRSCA41017", "SPRRSCA41008", "SPRRSCA41010", "SPRRSCA41015", "SPRRSCA41001", "SPRRSCA41006", "SPRRSCA41016", "SPRRSCA41003", "SPRRSCA41020", "SPRRSCA41012", "SPRRSCA41019", "SPRRSCA41022", "SPRRSCA41005", "SPRRSCA41007", "SPRRSCA41013", "SPRRSCA41021", "SPRRSCA41004", "SPRRSCA41009","SPRRSOA41018", "SPRRSOA41002", "SPRRSOA41011", "SPRRSOA41014", "SPRRSOA41017", "SPRRSOA41008", "SPRRSOA41010", "SPRRSOA41015", "SPRRSOA41001", "SPRRSOA41006", "SPRRSOA41016", "SPRRSOA41003", "SPRRSOA41020", "SPRRSOA41012", "SPRRSOA41019", "SPRRSOA41022", "SPRRSOA41005", "SPRRSOA41007", "SPRRSOA41013", "SPRRSOA41021", "SPRRSOA41004", "SPRRSOA41009","SSCRSCA42008", "SSCRSCA42003", "SSCRSCA42004", "SSCRSCA42002", "SSCRSCA42007", "SSCRSCA42010", "SSCRSCA42001", "SSCRSCA42013", "SSCRSCA42006", "SSCRSCA42011", "SSCRSCA42014", "SSCRSCA42016", "SSCRSCA42009", "SSCRSCA42005", "SSCRSCA42012", "SSCRSCA42015","SSCRSOA42008", "SSCRSOA42003", "SSCRSOA42004", "SSCRSOA42002", "SSCRSOA42007", "SSCRSOA42010", "SSCRSOA42001", "SSCRSOA42013", "SSCRSOA42006", "SSCRSOA42011", "SSCRSOA42014", "SSCRSOA42016", "SSCRSOA42009", "SSCRSOA42005", "SSCRSOA42012", "SSCRSOA42015","SRSRSCA43018", "SRSRSCA43001", "SRSRSCA43013", "SRSRSCA43014", "SRSRSCA43003", "SRSRSCA43015", "SRSRSCA43010", "SRSRSCA43029", "SRSRSCA43026", "SRSRSCA43007", "SRSRSCA43016", "SRSRSCA43004", "SRSRSCA43009", "SRSRSCA43021", "SRSRSCA43019", "SRSRSCA43022", "SRSRSCA43005", "SRSRSCA43008", "SRSRSCA43025", "SRSRSCA43020", "SRSRSCA43024", "SRSRSCA43030", "SRSRSCA43011", "SRSRSCA43027", "SRSRSCA43017", "SRSRSCA43006", "SRSRSCA43028", "SRSRSCA43023", "SRSRSCA43012", "SRSRSCA43002","SRSRSOA43018", "SRSRSOA43001", "SRSRSOA43013", "SRSRSOA43014", "SRSRSOA43003", "SRSRSOA43015", "SRSRSOA43010", "SRSRSOA43029", "SRSRSOA43026", "SRSRSOA43007", "SRSRSOA43016", "SRSRSOA43004", "SRSRSOA43009", "SRSRSOA43021", "SRSRSOA43019", "SRSRSOA43022", "SRSRSOA43005", "SRSRSOA43008", "SRSRSOA43025", "SRSRSOA43020", "SRSRSOA43024", "SRSRSOA43030", "SRSRSOA43011", "SRSRSOA43027", "SRSRSOA43017", "SRSRSOA43006", "SRSRSOA43028", "SRSRSOA43023", "SRSRSOA43012", "SRSRSOA43002","SEMGRSCA31074", "SEMGRSCA31024", "SEMGRSCA31059", "SEMGRSCA31037", "SEMGRSCA31072", "SEMGRSCA31062", "SEMGRSCA31068", "SEMGRSCA31040", "SEMGRSCA31041", "SEMGRSCA31001", "SEMGRSCA31013", "SEMGRSCA31094", "SEMGRSCA31036", "SEMGRSCA31092", "SEMGRSCA31060", "SEMGRSCA31095", "SEMGRSCA31006", "SEMGRSCA31090", "SEMGRSCA31035", "SEMGRSCA31064", "SEMGRSCA31075", "SEMGRSCA31082", "SEMGRSCA31070", "SEMGRSCA31002", "SEMGRSCA31087", "SEMGRSCA31058", "SEMGRSCA31044", "SEMGRSCA31008", "SEMGRSCA31030", "SEMGRSCA31021", "SEMGRSCA31045", "SEMGRSCA31015", "SEMGRSCA31023", "SEMGRSCA31097", "SEMGRSCA31016", "SEMGRSCA31017", "SEMGRSCA31047", "SEMGRSCA31011", "SEMGRSCA31083", "SEMGRSCA31028", "SEMGRSCA31034", "SEMGRSCA31007", "SEMGRSCA31049", "SEMGRSCA31003", "SEMGRSCA31019", "SEMGRSCA31055", "SEMGRSCA31073", "SEMGRSCA31042", "SEMGRSCA31061", "SEMGRSCA31010", "SEMGRSCA31089", "SEMGRSCA31027", "SEMGRSCA31091", "SEMGRSCA31051", "SEMGRSCA31093", "SEMGRSCA31067", "SEMGRSCA31079", "SEMGRSCA31026", "SEMGRSCA31066", "SEMGRSCA31088", "SEMGRSCA31086", "SEMGRSCA31004", "SEMGRSCA31048", "SEMGRSCA31065", "SEMGRSCA31053", "SEMGRSCA31025", "SEMGRSCA31078", "SEMGRSCA31018", "SEMGRSCA31050", "SEMGRSCA31085", "SEMGRSCA31038", "SEMGRSCA31020", "SEMGRSCA31012", "SEMGRSCA31052", "SEMGRSCA31096", "SEMGRSCA31071", "SEMGRSCA31057", "SEMGRSCA31032", "SEMGRSCA31022", "SEMGRSCA31031", "SEMGRSCA31009", "SEMGRSCA31077", "SEMGRSCA31099", "SEMGRSCA31084", "SEMGRSCA31076", "SEMGRSCA31098", "SEMGRSCA31046", "SEMGRSCA31080", "SEMGRSCA31081","SEMGRSOA31074", "SEMGRSOA31024", "SEMGRSOA31059", "SEMGRSOA31037", "SEMGRSOA31072", "SEMGRSOA31062", "SEMGRSOA31068", "SEMGRSOA31040", "SEMGRSOA31041", "SEMGRSOA31001", "SEMGRSOA31013", "SEMGRSOA31094", "SEMGRSOA31036", "SEMGRSOA31092", "SEMGRSOA31060", "SEMGRSOA31095", "SEMGRSOA31006", "SEMGRSOA31090", "SEMGRSOA31035", "SEMGRSOA31064", "SEMGRSOA31075", "SEMGRSOA31082", "SEMGRSOA31070", "SEMGRSOA31002", "SEMGRSOA31087", "SEMGRSOA31058", "SEMGRSOA31044", "SEMGRSOA31008", "SEMGRSOA31030", "SEMGRSOA31021", "SEMGRSOA31045", "SEMGRSOA31015", "SEMGRSOA31023", "SEMGRSOA31097", "SEMGRSOA31016", "SEMGRSOA31017", "SEMGRSOA31047", "SEMGRSOA31011", "SEMGRSOA31083", "SEMGRSOA31028", "SEMGRSOA31034", "SEMGRSOA31007", "SEMGRSOA31049", "SEMGRSOA31003", "SEMGRSOA31019", "SEMGRSOA31055", "SEMGRSOA31073", "SEMGRSOA31042", "SEMGRSOA31061", "SEMGRSOA31010", "SEMGRSOA31089", "SEMGRSOA31027", "SEMGRSOA31091", "SEMGRSOA31051", "SEMGRSOA31093", "SEMGRSOA31067", "SEMGRSOA31079", "SEMGRSOA31026", "SEMGRSOA31066", "SEMGRSOA31088", "SEMGRSOA31086", "SEMGRSOA31004", "SEMGRSOA31048", "SEMGRSOA31065", "SEMGRSOA31053", "SEMGRSOA31025", "SEMGRSOA31078", "SEMGRSOA31018", "SEMGRSOA31050", "SEMGRSOA31085", "SEMGRSOA31038", "SEMGRSOA31020", "SEMGRSOA31012", "SEMGRSOA31052", "SEMGRSOA31096", "SEMGRSOA31071", "SEMGRSOA31057", "SEMGRSOA31032", "SEMGRSOA31022", "SEMGRSOA31031", "SEMGRSOA31009", "SEMGRSOA31077", "SEMGRSOA31099", "SEMGRSOA31084", "SEMGRSOA31076", "SEMGRSOA31098", "SEMGRSOA31046", "SEMGRSOA31080", "SEMGRSOA31081","SEESRSCA32002", "SEESRSCA32001", "SEESRSCA32003", "SEESRSCA32004","SEESRSOA32002", "SEESRSOA32001", "SEESRSOA32003", "SEESRSOA32004","SERJRSCA33001", "SERJRSCA33007", "SERJRSCA33002", "SERJRSCA33003", "SERJRSCA33004", "SERJRSCA33005", "SERJRSCA33009", "SERJRSCA33008", "SERJRSCA33006","SERJRSOA33001", "SERJRSOA33007", "SERJRSOA33002", "SERJRSOA33003", "SERJRSOA33004", "SERJRSOA33005", "SERJRSOA33009", "SERJRSOA33008", "SERJRSOA33006","SESPRSCA35091", "SESPRSCA35156", "SESPRSCA35142", "SESPRSCA35074", "SESPRSCA35061", "SESPRSCA35103", "SESPRSCA35062", "SESPRSCA35161", "SESPRSCA35112", "SESPRSCA35051", "SESPRSCA35133", "SESPRSCA35023", "SESPRSCA35163", "SESPRSCA35157", "SESPRSCA35093", "SESPRSCA35072", "SESPRSCA35031", "SESPRSCA35104", "SESPRSCA35022", "SESPRSCA35063", "SESPRSCA35172", "SESPRSCA35153", "SESPRSCA35162", "SESPRSCA35021", "SESPRSCA35083", "SESPRSCA35101", "SESPRSCA35151", "SESPRSCA35011", "SESPRSCA35092", "SESPRSCA35071", "SESPRSCA35155", "SESPRSCA35064", "SESPRSCA35121", "SESPRSCA35131", "SESPRSCA35014", "SESPRSCA35095", "SESPRSCA35052", "SESPRSCA35094", "SESPRSCA35041", "SESPRSCA35032", "SESPRSCA35073", "SESPRSCA35171", "SESPRSCA35143", "SESPRSCA35065", "SESPRSCA35012", "SESPRSCA35114", "SESPRSCA35174", "SESPRSCA35033", "SESPRSCA35173", "SESPRSCA35102", "SESPRSCA35013", "SESPRSCA35132", "SESPRSCA35081", "SESPRSCA35034", "SESPRSCA35015", "SESPRSCA35111", "SESPRSCA35154", "SESPRSCA35115", "SESPRSCA35113", "SESPRSCA35082", "SESPRSCA35141", "SESPRSCA35152", "SESPRSCA35016","SESPRSOA35091", "SESPRSOA35156", "SESPRSOA35142", "SESPRSOA35074", "SESPRSOA35061", "SESPRSOA35103", "SESPRSOA35062", "SESPRSOA35161", "SESPRSOA35112", "SESPRSOA35051", "SESPRSOA35133", "SESPRSOA35023", "SESPRSOA35163", "SESPRSOA35157", "SESPRSOA35093", "SESPRSOA35072", "SESPRSOA35031", "SESPRSOA35104", "SESPRSOA35022", "SESPRSOA35063", "SESPRSOA35172", "SESPRSOA35153", "SESPRSOA35162", "SESPRSOA35021", "SESPRSOA35083", "SESPRSOA35101", "SESPRSOA35151", "SESPRSOA35011", "SESPRSOA35092", "SESPRSOA35071", "SESPRSOA35155", "SESPRSOA35064", "SESPRSOA35121", "SESPRSOA35131", "SESPRSOA35014", "SESPRSOA35095", "SESPRSOA35052", "SESPRSOA35094", "SESPRSOA35041", "SESPRSOA35032", "SESPRSOA35073", "SESPRSOA35171", "SESPRSOA35143", "SESPRSOA35065", "SESPRSOA35012", "SESPRSOA35114", "SESPRSOA35174", "SESPRSOA35033", "SESPRSOA35173", "SESPRSOA35102", "SESPRSOA35013", "SESPRSOA35132", "SESPRSOA35081", "SESPRSOA35034", "SESPRSOA35015", "SESPRSOA35111", "SESPRSOA35154", "SESPRSOA35115", "SESPRSOA35113", "SESPRSOA35082", "SESPRSOA35141", "SESPRSOA35152", "SESPRSOA35016","COMSRSCA50004", "COMSRSCA50001", "COMSRSCA50003", "COMSRSCA50002","COMSRSOA50004", "COMSRSOA50001", "COMSRSOA50003", "COMSRSOA50002","COGORSCA52001", "COGORSCA52011", "COGORSCA52015", "COGORSCA52010", "COGORSCA52003", "COGORSCA52004", "COGORSCA52017", "COGORSCA52014", "COGORSCA52012", "COGORSCA52009", "COGORSCA52005", "COGORSCA52002", "COGORSCA52016", "COGORSCA52018", "COGORSCA52006", "COGORSCA52013", "COGORSCA52008", "COGORSCA52007","COGORSOA52001", "COGORSOA52011", "COGORSOA52015", "COGORSOA52010", "COGORSOA52003", "COGORSOA52004", "COGORSOA52017", "COGORSOA52014", "COGORSOA52012", "COGORSOA52009", "COGORSOA52005", "COGORSOA52002", "COGORSOA52016", "COGORSOA52018", "COGORSOA52006", "COGORSOA52013", "COGORSOA52008", "COGORSOA52007","COMTRSCA51002", "COMTRSCA51006", "COMTRSCA51001", "COMTRSCA51013", "COMTRSCA51009", "COMTRSCA51004", "COMTRSCA51011", "COMTRSCA51007", "COMTRSCA51008", "COMTRSCA51005", "COMTRSCA51012", "COMTRSCA51003", "COMTRSCA51014", "COMTRSCA51010", "COMTRSCA51015", "COMTRSCA51016","COMTRSOA51002", "COMTRSOA51006", "COMTRSOA51001", "COMTRSOA51013", "COMTRSOA51009", "COMTRSOA51004", "COMTRSOA51011", "COMTRSOA51007", "COMTRSOA51008", "COMTRSOA51005", "COMTRSOA51012", "COMTRSOA51003", "COMTRSOA51014", "COMTRSOA51010", "COMTRSOA51015", "COMTRSOA51016"]
#RegioesSaude = ["NERNRSCA24004", "NERNRSCA24008", "NERNRSCA24003", "NERNRSCA24006", "NERNRSCA24002", "NERNRSCA24001", "NERNRSCA24005", "NERNRSCA24007","NERNRSOA24004", "NERNRSOA24008", "NERNRSOA24003", "NERNRSOA24006", "NERNRSOA24002", "NERNRSOA24001", "NERNRSOA24005", "NERNRSOA24007","NEPBRSCA25011", "NEPBRSCA25007", "NEPBRSCA25003", "NEPBRSCA25002", "NEPBRSCA25015", "NEPBRSCA25001", "NEPBRSCA25009", "NEPBRSCA25005", "NEPBRSCA25010", "NEPBRSCA25006", "NEPBRSCA25016", "NEPBRSCA25014", "NEPBRSCA25004", "NEPBRSCA25008", "NEPBRSCA25013", "NEPBRSCA25012", "NEPBRSOA25007", "NEPBRSOA25003", "NEPBRSOA25002", "NEPBRSOA25015", "NEPBRSOA25001", "NEPBRSOA25009", "NEPBRSOA25005", "NEPBRSOA25010", "NEPBRSOA25006", "NEPBRSOA25016", "NEPBRSOA25014", "NEPBRSOA25008", "NEPBRSOA25012","NEBARSCA29023", "NEBARSCA29017", "NEBARSCA29001", "NEBARSCA29019", "NEBARSCA29025", "NEBARSCA29015", "NEBARSCA29026", "NEBARSCA29012", "NEBARSCA29022", "NEBARSCA29006", "NEBARSCA29010", "NEBARSCA29028", "NEBARSCA29011", "NEBARSCA29003", "NEBARSCA29009", "NEBARSCA29002", "NEBARSCA29008", "NEBARSCA29018", "NEBARSCA29021", "NEBARSCA29005", "NEBARSCA29007", "NEBARSCA29014", "NEBARSCA29027", "NEBARSCA29004", "NEBARSCA29016", "NEBARSCA29024", "NEBARSCA29020", "NEBARSCA29013","NEBARSOA29023", "NEBARSOA29001", "NEBARSOA29019", "NEBARSOA29025", "NEBARSOA29015", "NEBARSOA29026", "NEBARSOA29012", "NEBARSOA29022", "NEBARSOA29006", "NEBARSOA29010", "NEBARSOA29028", "NEBARSOA29011", "NEBARSOA29003", "NEBARSOA29009", "NEBARSOA29002",  "NEBARSOA29018", "NEBARSOA29005", "NEBARSOA29014", "NEBARSOA29027", "NEBARSOA29004", "NEBARSOA29016", "NEBARSOA29024", "NEBARSOA29020", "NEBARSOA29013","NESERSCA28007", "NESERSCA28001", "NESERSCA28002", "NESERSCA28003", "NESERSCA28005", "NESERSCA28006", "NESERSCA28004","NESERSOA28007", "NESERSOA28001", "NESERSOA28002", "NESERSOA28003", "NESERSOA28005", "NESERSOA28006", "NESERSOA28004","NEALRSCA27010", "NEALRSCA27005", "NEALRSCA27007", "NEALRSCA27004", "NEALRSCA27001", "NEALRSCA27008", "NEALRSCA27003", "NEALRSCA27009", "NEALRSCA27006", "NEALRSCA27002","NEALRSOA27010", "NEALRSOA27005", "NEALRSOA27007", "NEALRSOA27004", "NEALRSOA27001", "NEALRSOA27008", "NEALRSOA27003", "NEALRSOA27009", "NEALRSOA27006", "NEALRSOA27002","NEMARSCA21001", "NEMARSCA21005", "NEMARSCA21006", "NEMARSCA21016", "NEMARSCA21002", "NEMARSCA21007", "NEMARSCA21014", "NEMARSCA21003", "NEMARSCA21019", "NEMARSCA21008", "NEMARSCA21009", "NEMARSCA21011", "NEMARSCA21004", "NEMARSCA21013", "NEMARSCA21018", "NEMARSCA21015", "NEMARSCA21010", "NEMARSCA21012", "NEMARSCA21017","NEMARSOA21001", "NEMARSOA21005", "NEMARSOA21006", "NEMARSOA21016", "NEMARSOA21002", "NEMARSOA21007", "NEMARSOA21014", "NEMARSOA21003", "NEMARSOA21019", "NEMARSOA21008", "NEMARSOA21009", "NEMARSOA21011", "NEMARSOA21004", "NEMARSOA21013", "NEMARSOA21018", "NEMARSOA21015", "NEMARSOA21010", "NEMARSOA21012", "NEMARSOA21017","NEPERSCA26010", "NEPERSCA26001", "NEPERSCA26009", "NEPERSCA26003", "NEPERSCA26008", "NEPERSCA26004", "NEPERSCA26005", "NEPERSCA26007", "NEPERSCA26002", "NEPERSCA26011", "NEPERSCA26012", "NEPERSCA26006","NEPERSOA26010", "NEPERSOA26001", "NEPERSOA26009", "NEPERSOA26003", "NEPERSOA26008", "NEPERSOA26004", "NEPERSOA26005", "NEPERSOA26007", "NEPERSOA26002", "NEPERSOA26011", "NEPERSOA26012", "NEPERSOA26006","NECERSCA23019", "NECERSCA23003", "NECERSCA23012", "NECERSCA23018", "NECERSCA23014", "NECERSCA23011", "NECERSCA23020", "NECERSCA23010", "NECERSCA23006", "NECERSCA23002", "NECERSCA23001", "NECERSCA23007", "NECERSCA23004", "NECERSCA23015", "NECERSCA23017", "NECERSCA23008", "NECERSCA23021", "NECERSCA23016", "NECERSCA23022", "NECERSCA23005", "NECERSCA23013", "NECERSCA23009","NECERSOA23019", "NECERSOA23003", "NECERSOA23012", "NECERSOA23018", "NECERSOA23014", "NECERSOA23011", "NECERSOA23020", "NECERSOA23010", "NECERSOA23006", "NECERSOA23002", "NECERSOA23001", "NECERSOA23007", "NECERSOA23004", "NECERSOA23015", "NECERSOA23017", "NECERSOA23008", "NECERSOA23021", "NECERSOA23016", "NECERSOA23022", "NECERSOA23005", "NECERSOA23013", "NECERSOA23009","NEPIRSCA22004", "NEPIRSCA22009", "NEPIRSCA22002", "NEPIRSCA22006", "NEPIRSCA22010", "NEPIRSCA22007", "NEPIRSCA22003", "NEPIRSCA22008", "NEPIRSCA22011", "NEPIRSCA22001", "NEPIRSCA22005","NEPIRSOA22004", "NEPIRSOA22009", "NEPIRSOA22002", "NEPIRSOA22006", "NEPIRSOA22010", "NEPIRSOA22007", "NEPIRSOA22003",  "NEPIRSOA22011", "NEPIRSOA22001", "NEPIRSOA22005"]
selecaoRegiaoHTML = '<select onchange="location = this.value;"><option>Selecione uma das Op√ß√µes a Seguir</option>'

for regiao in RegioesSaude:
        selecaoRegiaoHTML = selecaoRegiaoHTML+'<option value="'+ regiao + '.html'+'">Regiao de Sa√∫de: '+ regiao +'</option>'

selecaoRegiaoHTML = selecaoRegiaoHTML+'</select>'

Estado = 'Estado '

regioes = ['Norte','Nordeste','Sul','Suldeste','Centro-Oeste']

stateListFileNordeste = ["AiL_An","BiA_An","CiE_An","MiA_An","PiB_An","PiE_An","PiI_An","RiN_An","SiE_An"]
stateListNordeste = ['do Alagoas', 'da Bahia', 'do Cear√°', 'do Maranh√£o', 'da Para√≠ba', 'de Pernambuco', 'do Piau√≠', 'do Rio Grande do Norte', 'de Sergipe']


stateListFileNorte = ["RiO_An","AiC_An","AiM_An","RiR_An","PiA_An","AiP_An","TiO_An"]
stateListNorte = ['de Rond√¥nia', 'do Acre' , 'do Amazonas' , 'de Roraima', 'do Par√°', 'do Amap√°', 'do Tocantins']

stateListFileSuldeste = ["MiG_An","EiS_An","RiJ_An","SiP_An"]
stateListSuldeste = ['de Minas Gerais', 'do Esp√≠rito Santo', 'do Rio de Janeiro', 'de S√£o Paulo' ]

stateListFileSul = ["PiR_An","SiC_An","RiS_An"]
stateListSul = ['do Paran√°' , 'de Santa Catarina' , 'do Rio Grande do Sul' ]

stateListFileCentro = ["MiS_An","MiT_An","GiO_An"]
stateListCentro = ['do Mato Grosso do Sul' , 'do Mato Grosso' , 'de Goi√°s']


listOfRegions = [stateListNorte, stateListNordeste, stateListSul,stateListSuldeste,stateListCentro]
listOfRegionsFiles = [stateListFileNorte, stateListFileNordeste, stateListFileSul,stateListFileSuldeste,stateListFileCentro]

stateListFile = stateListFileNordeste + stateListFileNorte + stateListFileSuldeste + stateListFileSul + stateListFileCentro
stateList = stateListNordeste + stateListNorte + stateListSuldeste + stateListSul + stateListCentro

path2stateListFile = list()
for i in stateListFile:
    path2stateListFile.append(i+'.html') 

selecaoHTML = '<select id="16131" onchange="location = this.value;"><option value="">Selecione uma das Op√ß√µes a Seguir</option><option value="'+ regioes[0]+'.html'+'">Estados do '+ regioes[0] +'</option><option value="'+ regioes[1]+'.html'+'">Estados do '+ regioes[1] +'</option><option value="'+ regioes[2]+'.html'+'">Estados do '+ regioes[2] +'</option><option value="'+ regioes[3]+'.html'+'">Estados do '+ regioes[3] +'</option><option value="'+ regioes[4]+'.html'+'">Estados do '+ regioes[4] +'</option><option value="'+ path2stateListFile[0]+'">Estado do Alagoas</option><option   value="'+ path2stateListFile[1]+'">Estado da Bahia</option><option   value="'+ path2stateListFile[2]+'">Estado do Cear√°</option><option   value="'+ path2stateListFile[3]+'">Estado do Maranh√£o</option><option   value="'+ path2stateListFile[4]+'">Estado da Para√≠ba</option><option   value="'+ path2stateListFile[5]+'">Estado de Pernambuco</option><option   value="'+ path2stateListFile[6]+'">Estado do Piau√≠</option><option   value="'+ path2stateListFile[7]+'">Estado do Rio Grande do Norte</option><option   value="'+ path2stateListFile[8]+'">Estado de Sergipe</option><option   value="'+ path2stateListFile[9]+'">Estado de Rond√¥nia</option><option   value="'+ path2stateListFile[10]+'">Estado do Acre</option><option   value="'+ path2stateListFile[11]+'">Estado do Amazonas</option><option   value="'+ path2stateListFile[12]+'">Estado de Roraima</option><option   value="'+ path2stateListFile[13]+'">Estado do Par√°</option><option   value="'+ path2stateListFile[14]+'">Estado do Amap√°</option><option   value="'+ path2stateListFile[15]+'">Estado do Tocantins</option><option   value="'+ path2stateListFile[16]+'">Estado de Minas Gerais</option><option   value="'+ path2stateListFile[17]+'">Estado do Esp√≠rito Santo</option><option   value="'+ path2stateListFile[18]+'">Estado do Rio de Janeiro</option><option   value="'+ path2stateListFile[19]+'">Estado de S√£o Paulo</option><option   value="'+ path2stateListFile[20]+'">Estado do Paran√°</option><option   value="'+ path2stateListFile[21]+'">Estado de Santa Catarina</option><option   value="'+ path2stateListFile[22]+'">Estado do Rio Grande do Sul</option><option   value="'+ path2stateListFile[23]+'">Estado do Mato Grosso do Sul</option><option   value="'+ path2stateListFile[24]+'">Estado do Mato Grosso</option><option   value="'+ path2stateListFile[25]+'">Estado de Goi√°s</option></select>'

stateListNordesteAbrev = ['BA','SE','AL','PE','PB','RN','CE','PI','MA']
municipioListBA = ['Salvador', 'Feira de Santana', 'Vit√≥ria da Conquista', 'Itabuna', 'Juazeiro']
municipioListSE = ['Aracaju', 'Itabaiana', 'Est√¢ncia', 'Lagarto']
municipioListAL = ['Macei√≥', 'Arapiraca','Murici', 'Coruripe', 'Palmeira dos √çndios']
municipioListPE = ['Recife', 'Petrolina', 'Caruaru']
municipioListPB = ['Jo√£o Pessoa', 'Campina Grande', 'Sousa', 'Patos']
municipioListRN = ['Natal', 'Mossor√≥']
municipioListCE = ['Fortaleza','Juazeiro do Norte', 'Sobral']
municipioListPI = ['Teresina','Picos','S√£o Raimundo Nonato']
municipioListMA = ['S√£o Lu√≠s', 'Imperatriz', 'Caxias']
municipiosFileList = [["BiASiliaioi","BiAFiiiaidiaitini","BiAVitiriaidioiqiiiti","BiAIiaiuiai","BiAJiaieiri"],["SiEAiaiaiui","SiEIiaiaiaiai","SiEEitiniii","SiELigirioi"],["AiLMiciii","AiLAiaiiiaiai","AiLMirici","AiLCiriripi","AiLPilieirioiniiisi"],["PiERicifi","PiEPitioiiiai","PiECiriaiui"],["PiBJiaieisiai","PiBCimiiiaiGiaidi","PiBSiuiai","PiBPitisi"],["RiNNitili","RiNMisioioi"],["CiEFiriaieiai","CiEJiaieirioiNiriei","CiESibiai"],["PiITirisini"],["MiASioiLiii","MiAIipiritiii","MiACixiai"]]
municipiosList = [municipioListBA,municipioListSE,municipioListAL,municipioListPE,municipioListPB,municipioListRN,municipioListCE,['Teresina'],municipioListMA]
#municipiosList = municipiosList[0]

selecaoMunicipiosHTML = '<select onchange="location = this.value;"><option>Selecione uma das Op√ß√µes a Seguir</option>'

for estado in zip(municipiosList,municipiosFileList):
    for municipio in zip(estado[0],estado[1]):
        selecaoMunicipiosHTML = selecaoMunicipiosHTML+'<option value="'+ municipio[1]+'.html'+'">Municipio: '+ municipio[0] +'</option>'

selecaoMunicipiosHTML = selecaoMunicipiosHTML+'</select>'

toPainel = dict()
predictionObservations = "As predi√ß√µes apresentadas s√£o realizadas com base em um modelo ARX (Auto-Regressivo com entradas eX√≥genas) em que as entradas s√£o os dados do google mobility (percentagem de pessoas nas resid√™ncias) atrasados em 10 dias. √â importante lembrar que os modelos ARX s√£o mais adequados para predi√ß√µes de curta dura√ß√£o, e, quanto maior for o horizonte de predi√ß√£o, maior ser√° o erro associado. Outro fator importante a ser considerado aqui √© que todos os modelos apresentados foram obtidos automaticamente. Isto √©, existe um algoritmo que captura os dados do minist√©rio da sa√∫de e de mobilidade, e realiza as predi√ß√µes de forma autom√°tica, sem a interven√ß√£o humana. Isto significa que, devido a particularidades dos estados quanto a coleta de informa√ß√µes e outros fatores, as predi√ß√µes podem n√£o representar corretamente a evolu√ß√£o das vari√°veis. Por isso, essas informa√ß√µes devem ser analisadas com cuidado e de forma cr√≠tica."
####

#pegar os ultimos valores de cada planilha e montar um painel com as informa√ß√£o
#poderia incluir tamb√©m no painel a proje√ß√£o de casos e √≥bitos para o dia seguinte

tools = 'pan'

population ={
  "Brasil": 210147125,
  "Nordeste": {'MA':7075181, 'PI':3273227, 'CE':9132078, 'RN':3506853, 'PB':4018127, 'PE':9557071, 'AL':3337357, 'SE':2298696, 'BA':14873064}, 
  "Norte": {'RO':1777225, 'AC':881935, 'AM':4144597, 'RR': 605761, 'PA':8602865, 'AP':845731, 'TO':1572866}, 
  "Suldeste": {'MG':21168791,'ES':4018650, 'RJ':17264943, 'SP':45919049}, 
  "Sul": {'PR':11433957, 'SC':7164788, 'RS':11377239},
  "Centro-Oeste": {'MS':2778986, 'MT':3484466, 'GO':7018354, 'DF':3015268}
}

def statelist2Population(shortMonth):
    return{
#"AiL_An","BiA_An","CiE_An","MiA_An","PiB_An","PiE_An","PiI_An","RiN_An","SiE_An"
        'AiL_An' : population['Nordeste']['AL'],
        'BiA_An' : population['Nordeste']['BA'],
        'CiE_An' : population['Nordeste']['CE'],
        'MiA_An' : population['Nordeste']['MA'],
        'PiB_An' : population['Nordeste']['PB'],
        'PiE_An' : population['Nordeste']['PE'],
        'PiI_An' : population['Nordeste']['PI'],
        'RiN_An' : population['Nordeste']['RN'],
        'SiE_An' : population['Nordeste']['SE'],
#"RiO_An","AiC_An","AiM_An","RiR_An","PiA_An","AiP_An","TiO_An"
        'RiO_An' : population['Norte']['RO'],
        'AiC_An' : population['Norte']['AC'],
        'AiM_An' : population['Norte']['AM'],
        'RiR_An' : population['Norte']['RR'],
        'PiA_An' : population['Norte']['PA'],
        'AiP_An' : population['Norte']['AP'],
        'TiO_An' : population['Norte']['TO'],
#"MiG_An","EiS_An","RiJ_An","SiP_An"       
        'MiG_An' : population['Suldeste']['MG'],
        'EiS_An' : population['Suldeste']['ES'],
        'RiJ_An' : population['Suldeste']['RJ'],
        'SiP_An' : population['Suldeste']['SP'],
#"PiR_An","SiC_An","RiS_An"
        'PiR_An' : population['Sul']['PR'],
        'SiC_An' : population['Sul']['SC'],
        'RiS_An' : population['Sul']['RS'],
#"MiS_An","MiT_An","GiO_An"
        'MiS_An' : population['Centro-Oeste']['MS'],
        'MiT_An' : population['Centro-Oeste']['MT'],
        'GiO_An' : population['Centro-Oeste']['GO']
    }[shortMonth]

def data2Num(shortMonth):
    return{
        'Data' : 0,
        'Saida_Estimada' : 1,
        'Saida': 2,
        'Erro' : 3
    }[shortMonth]

def readCSV(filename_src,column=data2Num('Saida_Estimada')):
    x = []
    importantDates = []
    y = []
  
    with open(filename_src, "r", encoding="utf8", newline="") as f:
        reader = csv.reader(f,delimiter=";")
        for row in reader: 
            #a = row[0].split(",")
            if len(row) < 2:
                reader = csv.reader(f,delimiter=",")
                break
        #if reader.line_num < 3: reader = csv.reader(f,delimiter=",")
        axisName = []
        flag = True
        counter = 0
        for row in reader: 
            if flag:
                flag = False
                axisName = row[0].split(',')
                continue
            if(row[column] == '+'):
                break
            #row = row[0].split(',')
            x.append(row[0])
            y.append(float(row[column])) 

            if counter%7 == 0:
                counter = 0
                importantDates.append(row[0])
            counter = counter + 1
    return [x,y,importantDates,axisName]
    

def plotConfiguration(x1,x,y,title,ylabel):
    plot = figure(plot_height=320, x_axis_type='datetime', title=title)
    plot.line(x=x,y=y, line_width=3, line_alpha=0.6,line_color=Spectral6[0])
    plot.xaxis.major_label_orientation = 1.2
    plot.xaxis.axis_label = 'Data de Notifica√ß√£o (Ano de 2020)'
    plot.yaxis.axis_label = ylabel
    plot.legend.location = "top_left"

    tick_vals = pd.to_datetime(x1).astype(int) / 10**6
    #plot.xaxis.ticker = FixedTicker(ticks=list(tick_vals))
    temp = list(tick_vals)
    plot.xaxis.ticker = FixedTicker(ticks=temp)
    return plot

def getAlbertoData(filename_src):
    Dict_data = dict()
    with open(filename_src, "r", encoding="utf8", newline="") as f:
        reader = csv.reader(f,delimiter=",")

        flag = True
        for row in reader: 
            if flag:
                flag = False
                continue
            Dict_data.setdefault(unidecode(row[0]),[]).append ([ row[1],row[2],row[3] ]) 
    return Dict_data

def plotAlberto(plot,data,local):
    data = data.get(unidecode(local), "empty")
    if data == 'empty':
        return
    time = list()
    y = list()
    value = 0
    counter = 0
    importantDates = list()
    timeTemp = ''
    for row in data:
        timeTemp = datetime.datetime.strptime(row[0], '%d/%m/%Y').strftime('20%y-%m-%d')
        time.append(timeTemp)
        if row[2] == '':
            value = 0
        else:
            value = float(row[2])
        y.append(value)
        if counter%7 == 0:
            counter = 0
            importantDates.append(row[0])
        counter = counter + 1
    x = pd.to_datetime(time)
    plot.line(x,y, line_width=1.5, line_alpha=0.6,legend_label='Proje√ß√µes Modelo 2',line_color=Spectral6[1],line_dash="4 4")
    tick_vals = pd.to_datetime(importantDates).astype(int) / 10**6
    #plot.xaxis.ticker = FixedTicker(ticks=list(tick_vals))
    temp = list(tick_vals)
    plot.xaxis.ticker = FixedTicker(ticks=temp)
    return plot

def plotMarcus(plot,data,local,delay=0):
    data = data.get(unidecode(local), "empty")
    if data == 'empty':
        return
    timeList = list()
    y = list()
    importantDates = list()
    timeTemp = ''
    acumulated = 0
    for row in zip(data,range(len(data)-1)):
        format = '%Y-%m-%d'
        timeTemp = datetime.datetime.strptime(row[0][0],format)+ timedelta(days=delay)
        timeTemp = timeTemp.strftime(format)
        timeTemp = timeList.append(timeTemp)
        if row[0][1] == '':
            value = 0
        else:
            acumulated = acumulated+float(row[0][1])
        y.append(acumulated)
        if row[1]%7 == 0:
            importantDates.append(row[0][0])
                
    x = pd.to_datetime(timeList)
    plot.line(x,y, line_width=2.5, line_alpha=0.6,legend_label='Proje√ß√µes Modelo 3',line_color=Spectral6[2],line_dash="4 4")
    tick_vals = pd.to_datetime(importantDates).astype(int) / 10**6
    #plot.xaxis.ticker = FixedTicker(ticks=list(tick_vals))
    temp = list(tick_vals)
    plot.xaxis.ticker = FixedTicker(ticks=temp)
    return plot

def getAllData(filename_src,file,population,filename_srcPredictions):
    #x = readCSV(filename_src+'OA'+file+'.csv')[0]
    GDM = readCSV(filename_src+'GDM'+file+'.csv')
    CAP = readCSV(filename_srcPredictions+'CA'+file+'P.csv')
    CAP50 = readCSV(filename_srcPredictions+'CA'+file+'50P.csv')
    CAP75 = readCSV(filename_srcPredictions+'CA'+file+'75P.csv')
    CAP60 = readCSV(filename_srcPredictions+'CA'+file+'60P.csv')

    OAP = readCSV(filename_srcPredictions+'OA'+file+'P.csv')
    OAP50 = readCSV(filename_srcPredictions+'OA'+file+'50P.csv')
    OAP75 = readCSV(filename_srcPredictions+'OA'+file+'75P.csv')
    OAP60 = readCSV(filename_srcPredictions+'OA'+file+'60P.csv')

    OA = readCSV(filename_src+'OA'+file+'.csv')
    CA = readCSV(filename_src+'CA'+file+'.csv')
    CN = readCSV(filename_src+'CN'+ file +'.csv')
    ON = readCSV(filename_src+'ON'+file+'.csv') 
    letalidade = [OA[0],[(i / (1+j)) *100 for i, j in zip(OA[1], CA[1])]] 
    incidencia = [CN[0],[(i / population) *100000 for i in CN[1] ]]
    popContaminada = [CA[0],[(i / population) *100 for i in CA[1]]]
    mortalidade = [ON[0],[(i / population) *100000 for i in ON[1] ]]
    taxaCrescimento = [CN[0],[(i /(1+j)) *100 for i, j in zip(CN[1], CA[1])] ]
    fatorCrescimento = [CN[0][0:len(CN)-1],[(i / (1+j)) *100 for i, j in zip(CN[1][1:len(CN[1])], CN[1][0:len(CN[1])-1])]]
    acumulatedData.setdefault(file,[]).append ([OA,CA,CN,ON,GDM,letalidade,incidencia,popContaminada,mortalidade,taxaCrescimento,fatorCrescimento,CAP,OAP,CAP50,OAP50,CAP60,OAP60,CAP75,OAP75]) 
    return acumulatedData

def Letalidade(filename_src,file,title,yLabel):
    
    OA = readCSV(filename_src+'OA'+file+'.csv') 
    CA = readCSV(filename_src+'CA'+file+'.csv')

    toPainel.clear()
    toPainel.setdefault('ObitosAcumulados',[]).append (OA[1][-1]) 
    toPainel.setdefault('CasosAcumulados',[]).append (CA[1][-1]) 

    x = pd.to_datetime(OA[0])
    y = [(i / (1+j)) *100 for i, j in zip(OA[1], CA[1])] 

    toPainel.setdefault('Letalidade',[]).append (y[-1]) 

    x1 = OA[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot
    
def Incidencia(filename_src,file, population, title,yLabel):
    
    CN = readCSV(filename_src+'CN'+ file +'.csv') #Casos Novos tem q pegar da planilha
    toPainel.setdefault('CasosNovos',[]).append (CN[1][-1]) 

    x = pd.to_datetime(CN[0])
    y = [(i / population) *100000 for i in CN[1]] 

    toPainel.setdefault('Incidencia',[]).append (y[-1]) 

    x1 = CN[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def PercentPopulContaminada(filename_src,file, population, title,yLabel):
    
    CA = readCSV(filename_src+'CA'+file+'.csv')

    x = pd.to_datetime(CA[0])
    y = [(i / population) *100 for i in CA[1]] 

    toPainel.setdefault('PercentualContaminado',[]).append (y[-1]) 

    x1 = CA[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def Mortalidade(filename_src,file, population, title,yLabel):
    
    ON = readCSV(filename_src+'ON'+file+'.csv') #Mortalidade tem q pegar da planilha
    toPainel.setdefault('ObitosNovos',[]).append (ON[1][-1]) 

    x = pd.to_datetime(ON[0])
    y = [(i / population) *100000 for i in ON[1]] 

    toPainel.setdefault('Mortalidade',[]).append (y[-1]) 

    x1 = ON[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def CasosNovos(filename_src,file, title,yLabel):
    
    CN = readCSV(filename_src+'CN'+file+'.csv') #Casos Novos tem q pegar da planilha

    x = pd.to_datetime(CN[0])
    y = CN[1]
    x1 = CN[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def ObtosNovos(filename_src,file, title,yLabel):
    
    ON = readCSV(filename_src+'ON'+file+'.csv') #√ìbitos Novos tem q pegar da planilha

    x = pd.to_datetime(ON[0])
    y = ON[1]
    x1 = ON[2]  
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def Mobilidade(filename_src,file, title,yLabel):
    
    GDM = readCSV(filename_src+'GDM'+file+'.csv') #Casos Novos tem q pegar da planilha

    x = pd.to_datetime(GDM[0])
    y = GDM[1] 
    x1 = GDM[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def CasosAcumulados(filename_src,file, title,yLabel):
    
    CA = readCSV(filename_src+'CA'+file+'.csv') #Casos Novos tem q pegar da planilha

    x = pd.to_datetime(CA[0])
    y = CA[1] 
    x1 = CA[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def ObitosAcumulados(filename_src,file, title,yLabel):
    
    OA = readCSV(filename_src+'OA'+file+'.csv') #√ìbitos Novos tem q pegar da planilha

    x = pd.to_datetime(OA[0])
    y = OA[1]
    x1 = OA[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def TaxadeCrescimento(filename_src,file, title,yLabel):
    
    CN = readCSV(filename_src+'CN'+file+'.csv')
    CA = readCSV(filename_src+'CA'+file+'.csv')

    x = pd.to_datetime(CA[0])
    y = [(i /(1+j)) *100 for i, j in zip(CN[1], CA[1])] 

    toPainel.setdefault('TaxadeCrescimento',[]).append (y[-1]) 

    x1 = CA[2]
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def FatordeCrescimento(filename_src,file, title,yLabel):
    
    CN = readCSV(filename_src+'CN'+file+'.csv') #√ìbitos Novos tem q pegar da planilha

    x = pd.to_datetime(CN[0][0:len(CN[1])-1])
    y = [(i / (1+j)) *100 for i, j in zip(CN[1][1:len(CN[1])], CN[1][0:len(CN[1])-1])] 
    x1 = CN[2]

    toPainel.setdefault('FatordeCrescimento',[]).append (y[-1]) 
    
    plot = plotConfiguration(x1,x,y,title,yLabel)
    plot.circle(x, y, fill_color="white", size=2)
    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)
    return plot

def comparacoCenarios(filename_src,title,yLabel,removelastData = 0):
    
    
    A = readCSV(filename_src+'P.csv')
    B = readCSV(filename_src+'50P.csv')
    C = readCSV(filename_src+'75P.csv')
    D = readCSV(filename_src+'60P.csv')
    
    #D = readCSV(filename_src+'PNP.csv')

    x = pd.to_datetime(B[0])
    plot = figure(plot_height=320, x_axis_type='datetime', title=title)
    plot.line(x=x,y=A[1][0:len(A[1])-removelastData], line_width=2, line_alpha=0.6,legend_label='Mantida no √öltimo Valor',line_color=Spectral6[0])
    plot.circle(x, A[1][0:len(A[1])-removelastData], fill_color = Spectral6[0], size=2)
    plot.line(x=x,y=B[1][0:len(B[1])-removelastData], line_width=2, line_alpha=0.6,legend_label='50% do valor Normal',line_color=Spectral6[0],line_dash="4 4")
    #plot.circle(x, B[1], fill_color=Spectral6[1], size=2)
    plot.line(x=x,y=C[1][0:len(C[1])-removelastData], line_width=1.5, line_alpha=0.6,legend_label='70% do valor Normal',line_color=Spectral6[0],line_dash="4 4")

    plot.line(x=x,y=D[1][0:len(D[1])-removelastData], line_width=1.5, line_alpha=0.6,legend_label='60% do valor Normal',line_color=Paired10[4])
    #plot.circle(x, C[1], fill_color=Spectral6[2], size=2)
    #plot.line(x=x[0:len(D[1])],y=D[1], line_width=3, line_alpha=0.6,legend_label='Dados de Valida√ß√£o de 15 dias anteriores',line_color=Spectral6[3])
    Prediction = Span(location=x[-16-removelastData],dimension='height', line_color='black',line_dash='dashed', line_width=0.5)
    plot.add_layout(Prediction)
    #Prediction = Span(location=x[-21],dimension='height', line_color='black',line_dash='dashed', line_width=0.5)
    #plot.add_layout(Prediction)
    
    plot.xaxis.major_label_orientation = 1.2
    plot.xaxis.axis_label = 'Data de Notifica√ß√£o (Ano de 2020)'
    plot.yaxis.axis_label = yLabel
    plot.legend.location = "top_left"

    hovertool = HoverTool(tooltips=[("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
    plot.add_tools(hovertool)

    tick_vals = pd.to_datetime(B[2]).astype(int) / 10**6
    #plot.xaxis.ticker = FixedTicker(ticks=list(tick_vals))
    temp = list(tick_vals)
    plot.xaxis.ticker = FixedTicker(ticks=temp)
    return plot 

def geracaoPorEstado(region,stateListFile,stateList,data,Titulos,yLabel):
    output_file('./dashboard/'+ region + '.html')
    plot = list()

    for i in range(len(Titulos)):
        plot.append(figure(plot_height=320, x_axis_type='datetime', title=Titulos[i]+region))
        plot[i].xaxis.major_label_orientation = 1.2
        plot[i].xaxis.axis_label = 'Data de Notifica√ß√£o (Ano de 2020)'
        plot[i].yaxis.axis_label = yLabel[i]
        hovertool = HoverTool(tooltips=[("Serie","$name"),("x", "$x{%F}"),("y", "@y"),],formatters={'$x': 'datetime',})
        plot[i].add_tools(hovertool)
            
    countState = 0
    for i in zip(stateListFile,stateList):
        stateTemp = i[1].split(' ')[1:]
        state = ''
        for j in stateTemp:
            state = state + ' ' + j

        dataTemp = data[i[0]][0]
        #flag = True
        counter = 0
        for j in dataTemp:
            #if flag: flag = False; continue
            y = j[1]
            x = pd.to_datetime(j[0])
            plot[counter].circle(x, y, fill_color="white", size=0.5)
            plot[counter].line(x,y, line_width=1+counter/10, line_alpha=0.6, line_color = Paired10[countState], legend_label=state,name=state)
            #fun√ß√£o inacabada
            plot[counter].legend.location = "top_left"
            counter = counter + 1
        countState = countState + 1

    select = Div(text=selecaoHTML)
    selectmunicipio = Div(text=selecaoMunicipiosHTML)
    selectRegiao = Div(text=selecaoRegiaoHTML)
    l=grid([[select, selectmunicipio,selectRegiao],[plot[0], plot[1]],[plot[2], plot[3]],[plot[4], plot[5]],[plot[6], plot[7]],[plot[8], plot[9]],[Paragraph(text= predictionObservations)],[plot[10], plot[11]],[plot[12], plot[13]],[plot[14], plot[15]],[plot[16], plot[17]], [plot[18]]])
    show(l)


acumulatedData = dict()
conjuntodePlots = list()
for i in zip(stateListFile,stateList): 
    
    output_file('./dashboard/'+ i[0] + '.html')
    
    select = Div(text=selecaoHTML)
    selectmunicipio = Div(text=selecaoMunicipiosHTML)

    casosAcumuladosComp     = comparacoCenarios('D:/Projetos/googleData/dataAn/'+'CA'+i[0],"Casos Acumulados no Estado " + i[1] + '(Proje√ß√£o com Taxa de Isolamento)',"Casos Acumulados")
    obitosAcumuladosComp    = comparacoCenarios('D:/Projetos/googleData/dataAn/'+'OA'+i[0],"√ìbitos Acumulados no Estado " + i[1] + '(Proje√ß√£o com Taxa de Isolamento)',"√ìbitos Acumulados")
    casosNovosComp          = comparacoCenarios('D:/Projetos/googleData/dataAn/'+'CN'+i[0],"Casos Novos no Estado " + i[1] + '(Proje√ß√£o com Taxa de Isolamento)',"Casos Acumulados")
    obitosNovosComp         = comparacoCenarios('D:/Projetos/googleData/dataAn/'+'ON'+i[0],"√ìbitos Novos no Estado " + i[1] + '(Proje√ß√£o com Taxa de Isolamento)',"√ìbitos Acumulados")
    
    letalidade              = Letalidade('D:/Projetos/googleData/data/',i[0],"Evolu√ß√£o da Letalidade no estado " + i[1],"Letalidade em porcentagens")
    incidencia              = Incidencia('D:/Projetos/googleData/data/',i[0], statelist2Population(i[0]), 'Evolu√ß√£o da Incid√™ncia no Estado ' + i[1], 'Incid√™ncia')
    percentPopulContaminada = PercentPopulContaminada('D:/Projetos/googleData/data/',i[0], statelist2Population(i[0]), 'Evolu√ß√£o da Percentual da Popula√ß√£o Contaminada no Estado ' + i[1], 'Popula√ß√£o Contaminada')
    mortalidade             = Mortalidade('D:/Projetos/googleData/data/',i[0], statelist2Population(i[0]), 'Evolu√ß√£o da Mortalidade no Estado ' + i[1],'Mortalidade')
    casosNovos              = CasosNovos('D:/Projetos/googleData/data/',i[0], 'Evolu√ß√£o de Casos Novos no Estado ' + i[1], 'Casos Novos')
    obtosNovos              = ObtosNovos('D:/Projetos/googleData/data/',i[0], 'Evolu√ß√£o de √ìbitos Novos no Estado ' + i[1], '√ìbitos Novos')
    casosAcumulados         = CasosAcumulados('D:/Projetos/googleData/data/',i[0], 'Evolu√ß√£o de Casos Acumulados no Estado ' + i[1], 'Casos Acumulados')
    obtosAcumulados         = ObitosAcumulados('D:/Projetos/googleData/data/',i[0], 'Evolu√ß√£o de √ìbitos Acumulados no Estado ' + i[1], '√ìbitos Acumulados')
    taxadeCrescimento       = TaxadeCrescimento('D:/Projetos/googleData/data/',i[0],"Evolu√ß√£o da Taxa de Crescimento no estado " + i[1], 'Taxa de Crescimento')
    fatordeCrescimento      = FatordeCrescimento('D:/Projetos/googleData/data/',i[0], 'Evolu√ß√£o do Fator de Crescimento no Estado ' + i[1], 'Fator de Crescimetno')
    mobilidade              = Mobilidade('D:/Projetos/googleData/data/',i[0], "Tend√™ncia de mobilidade para Espa√ßos Residenciais (0 Representa a M√©dia) no Estado ",'Mobilidade Residencial')
    acumulatedData[i[0]]    = getAllData('D:/Projetos/googleData/data/',i[0],statelist2Population(i[0]),'D:/Projetos/googleData/dataAn/')[i[0]]
    
    paragraph1 = Paragraph(text="Casos Acumulados = " + "{:.{}f}".format(toPainel['CasosAcumulados'][0],4))
    paragraph2 = Paragraph(text="Casos Novos = " +"{:.{}f}".format(toPainel['CasosNovos'][0],4))
    paragraph3 = Paragraph(text="Incid√™ncia = " + "{:.{}f}".format(toPainel['Incidencia'][0],4))
    paragraph4 = Paragraph(text="Letalidade = " + "{:.{}f}".format(toPainel['Letalidade'][0],4) + '%')
    paragraph5 = Paragraph(text="Mortalidade = " + "{:.{}f}".format(toPainel['Mortalidade'][0],4))
    paragraph6 = Paragraph(text="√ìbitos Acumulados = " + "{:.{}f}".format(toPainel['ObitosAcumulados'][0],4))
    paragraph7 = Paragraph(text="√ìbitos Novos = " + "{:.{}f}".format(toPainel['ObitosNovos'][0],4))
    paragraph8 = Paragraph(text="Pessoas Contaminadas = " + "{:.{}f}".format(toPainel['PercentualContaminado'][0],4) + '%')
    paragraph9 = Paragraph(text="Taxa de Crescimento = " + "{:.{}f}".format(toPainel['TaxadeCrescimento'][0],4))
    paragraph10 = Paragraph(text="Fator de Crescimetno = " + "{:.{}f}".format(toPainel['FatordeCrescimento'][0],4))
    paragraphOBS = Paragraph(text= predictionObservations)
    selectRegiao = Div(text=selecaoRegiaoHTML)
    l=grid([
    [select,selectmunicipio,selectRegiao],
    [paragraph1,paragraph2,paragraph3,paragraph4,paragraph5],
    [paragraph6,paragraph7,paragraph8,paragraph9,paragraph10],
    [casosAcumuladosComp, obitosAcumuladosComp],
    [casosNovosComp, obitosNovosComp],
    [paragraphOBS],
    [casosAcumulados, obtosAcumulados],
    [casosNovos, obtosNovos],
    [mobilidade],
    [letalidade, incidencia],
    [percentPopulContaminada,mortalidade],
    [taxadeCrescimento,fatordeCrescimento]
    ])
    show(l) 

Titulos = [ #OA,CA,CN,ON,GDM,letalidade,incidencia,popContaminada,mortalidade,taxaCrescimento,fatorCrescimento,CAP,OAP,CAP50,OAP50,CAP75,OAP75]
    "Evolu√ß√£o de √ìbitos Acumulados nos Estados do ",
    "Evolu√ß√£o de Casos Acumulados nos Estados do ",
    'Evolu√ß√£o de Casos Novos nos Estados do ',
    'Evolu√ß√£o de √ìbitos Novos nos Estados do ',
    "Tend√™ncia de mobilidade para Espa√ßos Residenciais (0 Representa a M√©dia) nos Estados",
    "Evolu√ß√£o da Letalidade nos Estados do ",
    'Evolu√ß√£o da Incid√™ncia nos Estados do ',
    'Evolu√ß√£o da Percentual da Popula√ß√£o Contaminada nos Estados do ',
    'Evolu√ß√£o da Mortalidade nos Estados do ',
    "Evolu√ß√£o da Taxa de Crescimento nos Estados do",
    'Evolu√ß√£o do Fator de Crescimento nos Estados do',
    "Predi√ß√£o de Casos Acumulados nos Estados do ",
    "Predi√ß√£o de √ìbitos Acumulados nos Estados do ",
    "Predi√ß√£o com 50% de interven√ß√£o de Casos Acumulados nos Estados do ",
    "Predi√ß√£o com 50% de interven√ß√£o de √ìbitos Acumulados nos Estados do ",
    "Predi√ß√£o com 60% de interven√ß√£o de Casos Acumulados nos Estados do ",
    "Predi√ß√£o com 60% de interven√ß√£o de √ìbitos Acumulados nos Estados do ",
    "Predi√ß√£o com 75% de interven√ß√£o de Casos Acumulados nos Estados do ",
    "Predi√ß√£o com 75% de interven√ß√£o de √ìbitos Acumulados nos Estados do ",
]

yLabel = [
    "√ìbitos Acumulados",
    "Casos Acumulados",
    'Casos Novos',
    '√ìbitos Novos',
    'Mobilidade Residencial',
    "Letalidade",
    'Incid√™ncia',
    'Popula√ß√£o Contaminada',
    'Mortalidade',
    "Taxa de Crescimento",
    'Fator de Crescimento',
    "√ìbitos Acumulados",
    "Casos Acumulados",
    "√ìbitos Acumulados",
    "Casos Acumulados",
    "√ìbitos Acumulados",
    "Casos Acumulados",
    "√ìbitos Acumulados",
    "Casos Acumulados"
]

for i in zip(regioes,listOfRegionsFiles,listOfRegions):
    geracaoPorEstado(i[0],i[1],i[2],acumulatedData,Titulos,yLabel)


#municipios
acumulatedData = dict()
conjuntodePlots = list()
OA_Alberto = getAlbertoData("D:/Projetos/ModeloAlberto/Dados/OA_AL.csv")
CA_Alberto = getAlbertoData("D:/Projetos/ModeloAlberto/Dados/CA_AL.csv")
#CN_Marcus = getAlbertoData('D:/Projetos/covid-br-model-epiforecasts/_nowcasts/covid-regional/brazil/cities-summary/cases.csv')

for j in zip(municipiosFileList,municipiosList, range(len(municipiosList)-1)): 
    for i in zip(j[0],j[1]):
        output_file('./dashboard/'+ i[0] + '.html')
        
        select = Div(text=selecaoHTML)
        selectmunicipio = Div(text=selecaoMunicipiosHTML)

        casosAcumuladosComp     = comparacoCenarios('D:/Projetos/googleData/dataAn/'+'CA'+i[0],"Casos Acumulados no Municipio: " + i[1] + '(Proje√ß√£o com Taxa de Isolamento)',"Casos Acumulados")
        plotAlberto(casosAcumuladosComp,CA_Alberto,i[1])
        #plotMarcus(casosAcumuladosComp,CN_Marcus,stateListNordesteAbrev[j[2]]+'-'+i[1],9)

        obitosAcumuladosComp    = comparacoCenarios('D:/Projetos/googleData/dataAn/'+'OA'+i[0],"√ìbitos Acumulados no Municipio: " + i[1] + '(Proje√ß√£o com Taxa de Isolamento)',"√ìbitos Acumulados")
        plotAlberto(obitosAcumuladosComp,OA_Alberto,i[1])

        paragraphOBS = Paragraph(text= predictionObservations)
        selectRegiao = Div(text=selecaoRegiaoHTML)

        l=grid([
        [select,selectmunicipio,selectRegiao],
        [casosAcumuladosComp, obitosAcumuladosComp],
        [paragraphOBS],
        ])
        #break
        show(l)



#Regioes de Saude
# datas est√£o come√ßando erradas das predi√ß√µes
acumulatedData = dict()
conjuntodePlots = list()

for j in RegioesSaude: 
    output_file('./dashboard/'+ j + '.html')
    
    select = Div(text=selecaoHTML)
    selectmunicipio = Div(text=selecaoMunicipiosHTML)
    selectRegiao = Div(text=selecaoRegiaoHTML)

    casosAcumuladosComp     = comparacoCenarios('D:/Projetos/googleData/dataAn/'+ j,"Casos: " + j,"Casos")
    if j[6] == 'C':
        casosAcumuladosComp     = comparacoCenarios('D:/Projetos/googleData/dataAn/'+ j,"Casos Acumulados: " + j,"Casos Acumulados")
    else:
        casosAcumuladosComp     = comparacoCenarios('D:/Projetos/googleData/dataAn/'+ j,"√ìbitos Acumulados: " + j,"√ìbitos Acumulados")
    paragraphOBS = Paragraph(text= predictionObservations)
    l=grid([
    [select,selectmunicipio,selectRegiao],
    [casosAcumuladosComp],
    [paragraphOBS]
    ])
    #break
    show(l)